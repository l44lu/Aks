<%- include("../../views/partials/admin/header") %>
<title>Coupon Management</title>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet">
<style>
  :root {
    --primary: #4a5cfc;
    --primary-dark: #1c1c1c;
    --primary-light: #a7a7a7;
    --success: #10B981;
    --danger: #EF4444;
    --warning: #F59E0B;
    --bg-dark: #1c1c1c;
    --bg-card: #2e2e2e;
    --text-primary: #525252;
    --text-secondary: #D1D5DB;
    --text-tertiary: #aaaaaa;
    --border-color: #3f3f3f;

  }
  
  body {
    font-family: 'Inter', sans-serif;
    background-color: var(--bg-dark);
    color: var(--text-primary);

  }

  .navbar {
    background-color: #2e2e2e;
    padding: 16px 24px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.3);
    position: fixed;
    top: 0;
    left: 249px;
    right: 0;
    z-index: 1000;
    transition: all 0.3s ease;
    border-bottom: 1px solid #313131;
  }



  .text-gray-800 {
    color: #ffffff;
}

  .text-gray-500 {
    color: var(--text-secondary);
  }

  .breadcrumb span {
    color: var(--text-tertiary);
    margin-right: 8px;
  }

  .page-container {
    padding-top: 32px;
    max-width: 1200px;
    margin: 0 auto;
  }

  .data-table {
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    transition: all 0.3s ease;
    background-color: var(--bg-card);
    border: 1px solid var(--border-color);
  }

  .data-table:hover {
    box-shadow: 0 10px 15px rgba(0, 0, 0, 0.4);
  }

  .data-table th {
    font-weight: 600;
    padding: 16px;
    background-color: #313131;
    color: var(--text-secondary);
    border-bottom: 1px solid var(--border-color);
  }

  .data-table td {
    padding: 16px;
    vertical-align: middle;
    border-bottom: 1px solid var(--border-color);
    color: var(--text-secondary);
  }

  .data-table tr:hover {
    background-color: #3d3d3d;
  }

  .btn {
    transition: all 0.3s ease;
    font-weight: 500;
    display: inline-flex;
    align-items: center;
    justify-content: center;
  }

  .btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
  }

  .btn-primary {
    background-color: var(--primary);
    color: white;
  }

  .btn-primary:hover {
    background-color: var(--primary-dark);
  }

  .status-badge {
    padding: 6px 12px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 600;
    letter-spacing: 0.5px;
    text-transform: uppercase;
    transition: all 0.3s ease;
  }

  .status-badge.active {
    background-color: rgba(16, 185, 129, 0.2);
    color: var(--success);
    border: 1px solid rgba(16, 185, 129, 0.4);
  }

  .status-badge.inactive {
    background-color: rgba(239, 68, 68, 0.2);
    color: var(--danger);
    border: 1px solid rgba(239, 68, 68, 0.4);
  }

  .status-badge:hover {
    transform: scale(1.05);
  }

  .modal {
    transform: scale(0.95);
    opacity: 0;
    transition: all 0.3s ease;
  }

  .modal.show {
    transform: scale(1);
    opacity: 1;
  }

  .modal-content {
    border-radius: 10px;
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.3);
    background-color: var(--bg-card);
    border: 1px solid var(--border-color);
  }

  .action-btn {
    padding: 8px;
    border-radius: 8px;
    transition: all 0.3s ease;
    background-color: #3a3a3a;
  }

  .action-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
  }

  .edit-btn {
    color: var(--primary-light);
  }

  .delete-btn {
    color: var(--danger);
  }

  .pagination {
    display: flex;
    justify-content: center;
    margin-top: 32px;
  }

  .page-link {
    transition: all 0.3s ease;
    margin: 0 4px;
    border-radius: 6px;
    background-color: var(--bg-card);
    color: var(--text-secondary);
    border: 1px solid var(--border-color);
  }

  .page-link:hover {
    transform: translateY(-2px);
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    background-color: #2D3748;
  }

  .page-link.active {
    background-color: var(--primary);
    color: white;
    border: 1px solid var(--primary-dark);
  }

  .form-input {
    transition: all 0.3s ease;
    border-radius: 6px;
    padding: 10px 16px;
    background-color: #494949;
    color: var(--text-primary);
    border: 1px solid var(--border-color);
  }
  .py-6 {
    padding-top: 4.5rem;
    padding-bottom: 1.5rem;
}
.text-gray-500 {
    color: #f5f5f5;
    background: #3e3e3e;
}

  .form-input:focus {
    transform: translateY(-2px);
    box-shadow: 0 4px 6px rgba(114, 114, 114, 0.2);
    border-color: var(--primary);
    outline: none;
  }

  .form-input::placeholder {
    color: var(--text-tertiary);
  }
  .bg-white {
    --tw-bg-opacity: 1;
    background-color: rgb(53 53 53);
}

  .form-input:disabled {
    background-color: #383838;
    color: var(--text-tertiary);
  }

  .form-label {
    color: var(--text-secondary);
    font-weight: 500;
  }

  /* Animation classes */
  .fade-in {
    animation: fadeIn 0.5s ease forwards;
  }

  .slide-in {
    animation: slideIn 0.5s ease forwards;
  }

  .bounce-in {
    animation: bounceIn 0.5s ease forwards;
  }

  .glow {
    animation: glow 1.5s ease-in-out infinite alternate;
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  @keyframes slideIn {
    from { transform: translateY(20px); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
  }

  @keyframes bounceIn {
    0% { transform: scale(0.8); opacity: 0; }
    70% { transform: scale(1.05); opacity: 1; }
    100% { transform: scale(1); opacity: 1; }
  }

  @keyframes glow {
    from { box-shadow: 0 0 5px rgba(99, 102, 241, 0.2); }
    to { box-shadow: 0 0 15px rgba(99, 102, 241, 0.6); }
  }
</style>
<div class="container mx-auto px-4 py-6">
    <!-- Header -->
    <div class="flex justify-between items-center mb-6">
        <div>
            <h1 class="text-2xl font-bold text-gray-800">Coupons</h1>
        </div>
        <button onclick="openModal()" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center">
            <span class="mr-2">+</span> Add Coupon
        </button>
    </div>

    <!-- Create Modal -->
<div id="couponModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
    <div class="bg-white p-6 rounded-lg shadow-lg w-1/3">
        <h2 class="text-xl font-bold mb-4">Add New Coupon</h2>
        <form id="couponForm" class="space-y-4">
            <input type="text" name="couponCreateName" placeholder="Coupon Name" class="w-full px-3 py-2 border rounded-md focus:ring-1 focus:ring-blue-500">
            <div class="grid grid-cols-2 gap-4">
                <input type="date" name="startCreateDate" class="w-full px-3 py-2 border rounded-md">
                <input type="date" name="expiryCreateDate" class="w-full px-3 py-2 border rounded-md">
            </div>
            <div class="grid grid-cols-2 gap-4">
                <input type="number" name="offerCreatePrice" placeholder="Offer Price" class="w-full px-3 py-2 border rounded-md">
                <input type="number" name="minimumCreatePrice" placeholder="Minimum Price" class="w-full px-3 py-2 border rounded-md">
            </div>
            <div class="flex justify-end space-x-3">
                <button type="button" onclick="closeModal()" class="px-4 py-2 bg-gray-300 text-gray-700 rounded-md">Cancel</button>
                <button type="submit" class="px-4 py-2 bg-purple-600 text-white rounded-md">Create Coupon</button>
            </div>
        </form>
    </div>
</div>


    <!-- Edit Modal -->
    <!-- Edit Coupon Modal -->
<div id="couponEditModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
    <div class="bg-white p-6 rounded-lg shadow-lg w-1/3">
        <h2 class="text-xl font-bold mb-4">Edit Coupon</h2>
        <form id="couponEditForm" class="space-y-4">
            <input type="text" name="couponName" class="w-full px-3 py-2 border rounded-md" disabled>
            <div class="grid grid-cols-2 gap-4">
                <input type="date" name="startDate" class="w-full px-3 py-2 border rounded-md">
                <input type="date" name="expiryDate" class="w-full px-3 py-2 border rounded-md">
            </div>
            <div class="grid grid-cols-2 gap-4">
                <input type="number" name="offerPrice" class="w-full px-3 py-2 border rounded-md">
                <input type="number" name="minimumPrice" class="w-full px-3 py-2 border rounded-md">
            </div>
            <div class="flex justify-end space-x-3">
                <button type="button" onclick="closeEditModal()" class="px-4 py-2 bg-gray-300 text-gray-700 rounded-md">Cancel</button>
                <button type="submit" class="px-4 py-2 bg-purple-600 text-white rounded-md">Edit Coupon</button>
            </div>
        </form>
    </div>
</div>


    <!-- Table -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-x-auto">
        <table class="w-full">
            <thead>
                <tr class="bg-gray-50 border-b border-gray-200 text-left text-xs font-medium text-gray-500 uppercase">
                    <th class="px-6 py-3">Coupon Code</th>
                    <th class="px-6 py-3">Created On</th>
                    <th class="px-6 py-3">Expires On</th>
                    <th class="px-6 py-3">Offer Price</th>
                    <th class="px-6 py-3">Min. Purchase</th>
                    <th class="px-6 py-3">Status</th>
                    <th class="px-6 py-3">Actions</th>
                </tr>
            </thead>
            <tbody class="divide-y divide-gray-200">
                <% if (coupons.length === 0) { %>
                    <tr><td colspan="7" class="text-center text-gray-500 py-8">No coupons available</td></tr>
                <% } else { %>
                    <% coupons.forEach(function(coupon) { %>
                        <tr class="hover:bg-gray-50">
                            <td class="px-6 py-4 text-sm font-medium text-gray-900"><%= coupon.name %></td>
                            <td class="px-6 py-4 text-sm text-gray-500"><%= new Date(coupon.createdOn).toLocaleDateString("en-GB") %></td>
                            <td class="px-6 py-4 text-sm text-gray-500"><%= new Date(coupon.expireOn).toLocaleDateString("en-GB") %></td>
                            <td class="px-6 py-4 text-sm text-blue-600 font-medium"><%= coupon.offerPrice %>₹</td>
                            <td class="px-6 py-4 text-sm text-gray-500"><%= coupon.minimumPrice %>₹</td>
                            <td class="px-6 py-4">
                                <span class="px-3 py-1 rounded-full text-xs font-medium <%= coupon.isList ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800' %>">
                                    <%= coupon.isListed? 'Active' : 'Inactive' %>
                                </span>
                            </td>
                            <td class="px-6 py-4 text-sm text-gray-500 flex space-x-3">
                                <button class="edit-btn text-blue-600 hover:text-blue-800" data-id="<%= coupon.name %>">✏</button>
                                <button onclick="deleteCoupon('<%= coupon.name%>')" class="text-red-600 hover:text-red-800 delete-btn">🗑</button>
                            </td>
                        </tr>
                    <% }); %>
                <% } %>
            </tbody>
        </table>
    </div>
</div>
<!-- Pagination -->
<div class="flex justify-center space-x-2 mt-4">
    <% if (currentPage > 1) { %>
        <a href="/admin/coupon?page=<%= currentPage - 1 %>" 
           class="px-4 py-2 bg-gray-300 rounded-md hover:bg-gray-400">Previous</a>
    <% } %>

    <% for (let i = 1; i <= totalPages; i++) { %>
        <a href="/admin/coupon?page=<%= i %>" 
           class="px-4 py-2 <%= currentPage === i ? 'bg-blue-600 text-white' : 'bg-gray-300' %> rounded-md hover:bg-gray-400">
           <%= i %>
        </a>
    <% } %>

    <% if (currentPage < totalPages) { %>
        <a href="/admin/coupons?page=<%= currentPage + 1 %>" 
           class="px-4 py-2 bg-gray-300 rounded-md hover:bg-gray-400">Next</a>
    <% } %>
</div>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.tailwindcss.com"></script>

<script>
document.addEventListener("DOMContentLoaded", function () {
    const today = new Date().toISOString().split("T")[0]
    const startCreateDateInput = document.querySelector('input[name="startCreateDate"]')
    if (startCreateDateInput) {
        startCreateDateInput.value = today
    }
    
    // Edit Coupon Form Submission
    document.getElementById("couponEditForm")?.addEventListener("submit", async function (event) {
        event.preventDefault()
        
        const formData = {
            couponName: document.querySelector("[name='couponName']").value,
            startDate: document.querySelector("[name='startDate']").value,
            expiryDate: document.querySelector("[name='expiryDate']").value,
            offerPrice: document.querySelector("[name='offerPrice']").value,
            minimumPrice: document.querySelector("[name='minimumPrice']").value
        }
        
        // Validate couponName
        if (!formData.couponName) {
            Swal.fire({
                icon: "error",
                title: "⚠️ Invalid Coupon Name",
                text: "Coupon name cannot be empty.",
                timer: 2500,
                showConfirmButton: false,
                background: "#fff7cd",
                color: "#5a3e1b"
            })
            return
        }
        
        // Check for valid coupon format (only letters, numbers, and dashes)
        const couponRegex = /^[a-zA-Z0-9-]{3,20}$/
        if (!couponRegex.test(formData.couponName)) {
            Swal.fire({
                icon: "error",
                title: "⚠️ Invalid Coupon Format",
                text: "Coupon name should be 3-20 characters long and contain only letters, numbers, and dashes.",
                timer: 2500,
                showConfirmButton: false,
                background: "#ffe6e6",
                color: "#b30000"
            })
            return
        }
        
        // Check if both dates are provided
        if (!formData.startDate || !formData.expiryDate) {
            Swal.fire({
                icon: "warning",
                title: "⚠️ Missing Dates",
                text: "Please select both the Start Date and Expiry Date.",
                timer: 2500, // Auto-close after 2.5 seconds
                showConfirmButton: false, // No button
                background: "#fffbe6",
                color: "#333"
            })
            return
        }
        
        const start = new Date(formData.startDate)
        const expiry = new Date(formData.expiryDate)
        
        // Ensure start date is before expiry date
        if (start >= expiry) {
            Swal.fire({
                icon: "error",
                title: "❌ Invalid Date Selection",
                html: "<b>Start Date</b> must be before the <b>Expiry Date</b>.",
                timer: 2500,
                showConfirmButton: false,
                background: "#ffe6e6",
                color: "#333"
            })
            return
        }
        
        // Validate Offer Price & Minimum Price
        const offerPrice = Number(formData.offerPrice)
        const minimumPrice = Number(formData.minimumPrice)
        
        if (offerPrice <= 0) {
            Swal.fire({
                icon: "error",
                title: "💰 Invalid Offer Price",
                text: "Offer price must be a positive number.",
                timer: 2500,
                showConfirmButton: false,
                background: "#fff5f5",
                color: "#333"
            })
            return
        }
        
        if ( minimumPrice <= 0) {
            Swal.fire({
                icon: "error",
                title: "💲 Invalid Minimum Price",
                text: "Minimum price must be a positive number.",
                timer: 2500,
                showConfirmButton: false,
                background: "#fff5f5",
                color: "#333"
            })
            return
        }
        
        if (minimumPrice < offerPrice) {
            Swal.fire({
                icon: "error",
                title: "⚖️ Pricing Error",
                html: "<b>Minimum Price</b> must be greater than or equal to the <b>Offer Price</b>.",
                timer: 2500,
                showConfirmButton: false,
                background: "#fff0f0",
                color: "#333"
            })
            return
        }
        
        try {
            const response = await fetch("/admin/editCoupon", {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(formData)
            })
            
            const result = await response.json()
            
            if (result.success) {
                Swal.fire({
                    title: "Success",
                    text: result.message,
                    icon: "success",
                    confirmButtonText: "OK"
                })
                .then(() => {
                    closeEditModal()
                    location.reload()
                })
            } else {
                Swal.fire({
                    title: "Error!",
                    text: result.message || "Something went wrong",
                    icon: "error",
                    confirmButtonText: "Try Again"
                })
            }
        } catch (error) {
            console.error("Error updating coupon:", error)
            Swal.fire({
                title: "Error!",
                text: "Something went wrong",
                icon: "error",
                confirmButtonText: "Try Again"
            })
        }
})

// Delete Coupon
window.deleteCoupon = async function(couponName) {
    console.log("Deleting coupon:", couponName)
    
    Swal.fire({
        title: "Are you sure?",
        text: `You are about to delete the coupon: ${couponName}`,
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#d33",
        cancelButtonColor: "#3085d6",
        confirmButtonText: "Yes, delete it!"
    })
    .then(async (result) => {
        if (result.isConfirmed) {
            try {
                const response = await fetch('/admin/deleteCoupon', {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ couponName })
                })
                
                const result = await response.json()
                if (result.success) {
                    Swal.fire({
                        title: "Success",
                        text: result.message,
                        icon: "success",
                        confirmButtonText: "OK"
                    })
                    .then(() => {
                        location.reload();
                    })
                } else {
                    Swal.fire({
                        title: "Error!",
                        text: result.message || "Something went wrong",
                        icon: "error",
                        confirmButtonText: "Try Again"
                    })
                }
            } catch (error) {
                console.error("Fetch error:", error)
                Swal.fire({
                    title: "Error!",
                    text: error.message || "Failed to delete the coupon.",
                    icon: "error",
                    confirmButtonText: "OK"
                })
            }
        }
    })
}

// Create Coupon Form Submission
document.getElementById("couponForm")?.addEventListener("submit", async function(event) {
    event.preventDefault()
    const formData = {
        couponName: document.querySelector('input[name="couponCreateName"]').value,
        startDate: document.querySelector('input[name="startCreateDate"]').value,
        expiryDate: document.querySelector('input[name="expiryCreateDate"]').value,
        offerPrice: document.querySelector('input[name="offerCreatePrice"]').value,
        minimumPrice: document.querySelector('input[name="minimumCreatePrice"]').value
    }
    
    // Validate couponName
    if (!formData.couponName) {
        Swal.fire({
            icon: "error",
            title: "⚠️ Invalid Coupon Name",
            text: "Coupon name cannot be empty.",
            timer: 2500,
            showConfirmButton: false,
            background: "#fff7cd",
            color: "#5a3e1b"
        })
        return
    }
    
    // Check for valid coupon format (only letters, numbers, and dashes)
    const couponRegex = /^[a-zA-Z0-9-]{3,20}$/
    if (!couponRegex.test(formData.couponName)) {
        Swal.fire({
            icon: "error",
            title: "⚠️ Invalid Coupon Format",
            text: "Coupon name should be 3-20 characters long and contain only letters, numbers, and dashes.",
            timer: 2500,
            showConfirmButton: false,
            background: "#ffe6e6",
            color: "#b30000"
        })
        return
    }
    
    const start = new Date(formData.startDate)
    const expiry = new Date(formData.expiryDate)
    
    if (!formData.startDate || !formData.expiryDate) {
        Swal.fire({
            icon: "warning",
            title: "Missing Dates",
            text: "Please select both start and expiry dates.",
            confirmButtonColor: "#3085d6",
            confirmButtonText: "OK"
        })
        return
    }

        if (start >= expiry) {
            Swal.fire({
                icon: "error",
                title: "Invalid Date Selection",
                text: "Start date must be before the expiry date.",
                confirmButtonColor: "#d33",
                confirmButtonText: "OK"
            });
            return;
        }
        
        const offerPrice = Number(formData.offerPrice)
        const minimumPrice = Number(formData.minimumPrice)
        if (offerPrice <= 0) {
            Swal.fire({
                icon: "error",
                title: "💰 Invalid Offer Price",
                text: "Offer price must be a positive number.",
                timer: 2500,
                showConfirmButton: false,
                background: "#fff5f5",
                color: "#333"
            })
            return
        }
        
        if ( minimumPrice <= 0) {
            Swal.fire({
                icon: "error",
                title: "💲 Invalid Minimum Price",
                text: "Minimum price must be a positive number.",
                timer: 2500,
                showConfirmButton: false,
                background: "#fff5f5",
                color: "#333"
            })
            return
        }
        
        if (minimumPrice < offerPrice) {
            Swal.fire({
                icon: "error",
                title: "⚖️ Pricing Error",
                html: "<b>Minimum Price</b> must be greater than or equal to the <b>Offer Price</b>.",
                timer: 2500,
                showConfirmButton: false,
                background: "#fff0f0",
                color: "#333"
            })
            return
        }
        
        try {
            const response = await fetch("/admin/createCoupon", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(formData)
            })
            
            const result = await response.json()
            if (response.ok) {
                Swal.fire({
                    title: "Success!",
                    text: result.message,
                    icon: "success",
                    confirmButtonText: "OK"
                })
                .then(() => {
                    closeModal()
                    location.reload()
                })
            } else {
                Swal.fire({
                    title: "Error!",
                    text: result.message || "Something went wrong",
                    icon: "error",
                    confirmButtonText: "Try Again"
                })
            }
        } catch (error) {
            console.error("Error:", error)
            Swal.fire({
                title: "Error!",
                text: "Failed to create coupon",
                icon: "error",
                confirmButtonText: "OK"
            })
        }
    })
    
    // Fetch Coupon Details for Editing
    document.querySelectorAll('.edit-btn').forEach(button => {
        button.addEventListener('click', async () => {
            const couponName = button.getAttribute('data-id')
            
            try {
                const response = await fetch(`/admin/get-coupon/${couponName}`)
                const coupon = await response.json()
                if (coupon) {
                    openEditModal(coupon)
                }
            } catch (error) {
                console.error("Error fetching coupon data:", error)
            }
        })
    })
    window.openModal = function () {
        const modal = document.getElementById("couponModal")
        modal?.classList.remove("hidden")
    }
    
    // Close Add Coupon Modal
    window.closeModal = function () {
        const modal = document.getElementById("couponModal")

        modal?.classList.add("hidden")
    }
    
    // Open Edit Coupon Modal
    window.openEditModal = function (coupon) {
        const modal = document.getElementById("couponEditModal")
        modal?.classList.remove("hidden")
        // Ensure values are properly set
        document.querySelector('[name="couponName"]').value = coupon.name || ''
        document.querySelector('[name="startDate"]').value = coupon.createdOn ? new Date(coupon.createdOn).toISOString().split('T')[0] : ''
        document.querySelector('[name="expiryDate"]').value = coupon.expireOn ? new Date(coupon.expireOn).toISOString().split('T')[0] : ''
        document.querySelector('[name="offerPrice"]').value = coupon.offerPrice || ''
        document.querySelector('[name="minimumPrice"]').value = coupon.minimumPrice || ''
    }
    
    // Close Edit Coupon Modal
    window.closeEditModal = function () {
        const modal = document.getElementById("couponEditModal")
        modal?.classList.add("hidden")
    }

    })
</script>
<%- include("../../views/partials/admin/footer") %>