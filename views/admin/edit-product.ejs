<%- include("../../views/partials/admin/header") %>
<head>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Include SweetAlert2 from CDN -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">

    <style>
        :root {
            --primary-bg: #1a1a1a;
            --card-bg: #212121;
            --input-bg: #2a2a2a;
            --border-color: #3a3a3a;
            --text-color: #e0e0e0;
            --title-color: #ffffff;
            --accent-color: #a0a0a0;
            --hover-color: #c2c2c2;
            --shadow-color: rgba(0, 0, 0, 0.6);
            --primary-blue: #0088ff;
            --danger-color: #ff6b6b;
        }
        
        body {
            background: var(--primary-bg);
            color: var(--text-color);
            font-family: 'Poppins', sans-serif;
            margin: 0;
            padding: 0;
        }
        
        .dashboard-container {
            max-width: 1200px;
            margin: 40px auto;
            padding: 0 30px;
        }
        
        .content-header {
            margin-bottom: 30px;
            position: relative;
        }
        
        .content-title {
            font-size: 28px;
            font-weight: 700;
            color: var(--title-color);
            margin-bottom: 10px;
            letter-spacing: 0.5px;
            position: relative;
            display: inline-block;
        }
        
        .content-title::after {
            content: '';
            position: absolute;
            bottom: -8px;
            left: 0;
            width: 235px;
            height: 4px;
            background: #747474;
            border-radius: 2px;
        }
        
        .card {
            background: var(--card-bg);
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 8px 16px var(--shadow-color);
            margin-bottom: 25px;
            transition: transform 0.3s, box-shadow 0.3s;
        }
        
        .card:hover {
            transform: translateY(-3px);
            box-shadow: 0 12px 20px var(--shadow-color);
        }
        
        .card-header {
            padding: 18px 22px;
            border-bottom: 1px solid var(--border-color);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .card-header h4 {
            margin: 0;
            font-size: 18px;
            font-weight: 600;
            color: var(--title-color);
            display: flex;
            align-items: center;
        }
        
        .card-header h4 i {
            margin-right: 12px;
            color: var(--primary-blue);
            font-size: 16px;
        }
        
        .card-body {
            padding: 22px;
        }
        
        .row {
            display: flex;
            flex-wrap: wrap;
            margin: 0 -12px;
        }
        
        .col-md-4, .col-md-6 {
            padding: 0 12px;
            box-sizing: border-box;
        }
        
        .col-md-4 {
            width: 33.333%;
        }
        
        .col-md-6 {
            width: 50%;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-label {
            display: block;
            font-weight: 500;
            margin-bottom: 8px;
            color: var(--text-color);
            font-size: 14px;
        }
        
        .form-control, .form-select {
            width: 100%;
            background: var(--input-bg);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 12px 15px;
            color: var(--text-color);
            font-size: 14px;
            transition: all 0.3s;
            box-sizing: border-box;
        }
        
        .form-control:focus, .form-select:focus {
            border-color: var(--primary-blue);
            box-shadow: 0 0 0 3px rgba(0, 136, 255, 0.2);
            outline: none;
        }
        
        .error-message {
            color: var(--danger-color);
            font-size: 12px;
            margin-top: 5px;
            display: block;
        }
        
        .btn {
            padding: 12px 24px;
            border-radius: 8px;
            font-weight: 600;
            font-size: 15px;
            transition: all 0.3s;
            border: none;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }
        
        .btn i {
            margin-right: 8px;
        }
        
        .btn-primary {
            background: var(--primary-blue);
            color: white;
        }
        
        .btn-danger {
            background: var(--danger-color);
            color: white;
        }
        
        .btn-primary:hover {
            background: #0077e6;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 136, 255, 0.4);
        }
        
        .btn-sm {
            padding: 8px 16px;
            font-size: 13px;
        }
        
        /* Image upload section improvements */
        .section-title {
            font-weight: 600;
            margin-bottom: 18px;
            color: var(--title-color);
            font-size: 16px;
            padding-bottom: 10px;
            border-bottom: 1px solid var(--border-color);
        }
        
        .thumbnails-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
            gap: 15px;
            margin-top: 15px;
            margin-bottom: 25px;
        }
        
        .thumbnail {
            position: relative;
            border-radius: 8px;
            overflow: hidden;
            border: 1px solid var(--border-color);
            aspect-ratio: 1;
        }
        
        .thumbnail img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .remove-image-btn {
            position: absolute;
            top: 8px;
            right: 8px;
            background: rgba(0, 0, 0, 0.7);
            border-radius: 50%;
            width: 26px;
            height: 26px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .remove-image-btn:hover {
            background: rgba(255, 0, 0, 0.8);
            transform: scale(1.1);
        }
        
        /* Image editing section improvements */
        #image-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .image-upload {
            background: var(--input-bg);
            border-radius: 10px;
            padding: 18px;
            border: 1px solid var(--border-color);
            transition: all 0.3s;
        }
        
        .image-upload:hover {
            border-color: var(--primary-blue);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }
        
        .image-preview {
            width: 100%;
            aspect-ratio: 1;
            border-radius: 8px;
            background: #333;
            margin: 15px 0;
            position: relative;
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .image-preview img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            display: block;
        }
        
        .image-preview::before {
            content: 'Preview';
            color: #777;
            font-size: 14px;
            position: absolute;
        }
        
        .image-preview img[src=""] + .image-preview::before {
            display: none;
        }
        
        .image-preview .edit-preview-btn,
        .image-preview .delete-btn {
            position: absolute;
            bottom: 10px;
            padding: 6px 12px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 500;
            opacity: 0;
            transition: opacity 0.3s;
        }
        
        .image-preview:hover .edit-preview-btn,
        .image-preview:hover .delete-btn {
            opacity: 1;
        }
        
        .image-preview .edit-preview-btn {
            background: var(--primary-blue);
            color: white;
            left: 10px;
            border: none;
            cursor: pointer;
        }
        
        .image-preview .delete-btn {
            background: var(--danger-color);
            color: white;
            right: 10px;
        }
        
        .image-cropper {
            margin-top: 15px;
            background: rgba(0, 0, 0, 0.85);
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            z-index: 1000;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }
        
        .cropper-container {
            height: 70vh;
            width: 70vw;
            max-width: 800px;
            background: #000;
            border-radius: 8px;
            overflow: hidden;
        }
        
        .cropper-controls {
            margin-top: 20px;
            display: flex;
            gap: 15px;
        }
        
        .cropper-controls button {
            background: var(--primary-blue);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s;
        }
        
        .cropper-controls button:hover {
            background: #0077e6;
            transform: translateY(-2px);
        }
        
        .cropper-controls button:last-child {
            background: #444;
        }
        
        .cropper-controls button:last-child:hover {
            background: #555;
        }
        
        .mt-2 {
            margin-top: 10px;
        }
        
        .mt-4 {
            margin-top: 20px;
        }
        
        .px-5 {
            padding-left: 32px;
            padding-right: 32px;
        }
        
        .text-center {
            text-align: center;
        }
        
        .mb-5 {
            margin-bottom: 32px;
        }
        
        /* Loading overlay */
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
            visibility: hidden;
            opacity: 0;
            transition: visibility 0s, opacity 0.3s;
        }
        
        .loading-overlay.active {
            visibility: visible;
            opacity: 1;
        }
        
        .spinner {
            width: 50px;
            height: 50px;
            border: 5px solid #f3f3f3;
            border-top: 5px solid var(--primary-blue);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        /* Form validation styles */
        .form-control.is-invalid,
        .form-select.is-invalid {
            border-color: var(--danger-color);
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' fill='none' stroke='%23dc3545' viewBox='0 0 12 12'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right calc(0.375em + 0.1875rem) center;
            background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
        }
        
        @media (max-width: 991px) {
            .col-md-4, .col-md-6 {
                width: 50%;
            }
            
            #image-container {
                grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
            }
        }
        
        @media (max-width: 767px) {
            .dashboard-container {
                margin: 20px auto;
                padding: 0 15px;
            }
            
            .content-title {
                font-size: 24px;
            }
            
            .card-body {
                padding: 15px;
            }
            
            .row {
                margin: 0 -8px;
            }
            
            .col-md-4, .col-md-6 {
                width: 100%;
                padding: 0 8px;
            }
            
            #image-container {
                grid-template-columns: 1fr;
            }
            
            .cropper-container {
                width: 90vw;
                height: 60vh;
            }
        }
    </style>
</head>

<div class="dashboard-container">
    <div class="content-header">
        <h2 class="content-title">Edit Product</h2>
        <p>Update your product information and inventory</p>
    </div>
    
    <!-- Loading overlay -->
    <div class="loading-overlay" id="loadingOverlay">
        <div class="spinner"></div>
    </div>
    
    <form method="post" action="/admin/editProduct/<%=product._id%>" enctype="multipart/form-data" id="editProductForm">
        <div class="card">
            <div class="card-header">
                <h4><i class="fas fa-info-circle"></i> Basic Information</h4>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input type="text" name="productName" value="<%=product.productName%>" class="form-control" id="product_name" placeholder="Enter product name">
                            <span id="productName-error" class="error-message"></span>
                        </div>
                    </div>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Full Description</label>
                    <textarea name="description" class="form-control" rows="4" placeholder="Enter product description"><%=product.description%></textarea>
                    <span id="description-error" class="error-message"></span>
                </div>
                
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="form-label">Category</label>
                            <select class="form-select" name="category">
                                <% if (cat && cat.length > 0) { %>
                                    <% for (let i = 0; i < cat.length; i++) { %>
                                        <option value="<%= cat[i].name %>" <% if(cat[i].name === product.category) { %> selected <% } %>>
                                            <%= cat[i].name %>
                                        </option>
                                    <% } %>
                                <% } else { %>
                                    <option value="">No Categories Available</option>
                                <% } %>
                            </select>
                            <span id="category-error" class="error-message"></span>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="form-label">Color</label>
                            <input name="color" type="text" value="<%=product.color%>" class="form-control" placeholder="e.g. Red, Blue, Black">
                            <span id="color-error" class="error-message"></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card">
            <div class="card-header">
                <h4><i class="fas fa-tag"></i> Pricing & Inventory</h4>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            <label class="form-label">Regular Price ($)</label>
                            <input placeholder="0.00" name="regularPrice" type="text" value="<%=product.regularPrice%>" class="form-control">
                            <span id="regularPrice-error" class="error-message"></span>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label class="form-label">Sale Price ($)</label>
                            <input name="salePrice" type="text" value="<%=product.salePrice%>" class="form-control" placeholder="0.00">
                            <span id="salePrice-error" class="error-message"></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Size Selection with Input Fields -->
<div class="mb-4">
    <label class="form-label">Size & Quantity</label>
    <div id="sizeQuantities">
        <% let sizeMap = {}; %>
        <% product.sizes.forEach(sizeObj => { sizeMap[sizeObj.size] = sizeObj.quantity; }); %>

        <% let allSizes = ["S", "M", "L", "XL", "XXL"]; %>
        <% allSizes.forEach(size => { %>
            <div class="mb-3 size-input">
                <label class="size-label"><%= size %></label>
                <input type="number" id="sizeQuantity-<%= size %>" name="sizes[<%= size %>]" 
                       class="form-control size-quantity" min="0" placeholder="Enter quantity"
                       value="<%= sizeMap[size] || 0 %>" oninput="updateSizesHiddenField()">
            </div>
        <% }); %>
    </div>

    <!-- Hidden Input to Store Sizes as JSON -->
    <input type="hidden" name="sizesWithQuantities" id="sizesWithQuantities">
    
    <div id="size-error" class="error-message"></div>
</div>
        
        <div class="card">
            <div class="card-header">
                <h4><i class="fas fa-images"></i> Product Images</h4>
            </div>
            <div class="card-body">
                <div class="section-title">Current Images</div>
                <div class="thumbnails-container">
                    <% if(product.productImage && product.productImage.length > 0) { %>
                        <% for(let i = 0; i < product.productImage.length; i++) { %>
                            <div class="thumbnail">
                                <input type="hidden" value="<%=product.productImage[i].replace('_', '_/')%>" name="existingImages">
                                <img src="<%=product.productImage[i].replace('_', '_/')%>" alt="Product image">
                                <div class="remove-image-btn">
                                    <i class="fas fa-times" onclick="deleteSingleImage('<%= product.productImage[i] %>', '<%= product._id %>')"></i>
                                </div>
                            </div>
                        <% } %>
                    <% } else { %>
                        <p>No images available</p>
                    <% } %>
                </div>
                
                <div class="section-title mt-4">Add New Images</div>
                <div class="card-body">
                    <div id="image-container" class="image-grid">
                        <!-- Images will be added dynamically here -->
                    </div>
                    <button type="button" class="btn btn-primary mt-2" id="addImageBtn">
                        <i class="fas fa-plus"></i> Add Image
                    </button>
                    <div id="images-error" class="error-message"></div>
                </div>
            </div>
        </div>
        
        <div class="text-center mb-5">
            <button class="btn btn-primary px-5" id="updateBtn" type="button">
                <i class="fas fa-save"></i> Update Product
            </button>
        </div>
    </form>
</div>

<%- include("../../views/partials/admin/footer") %>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

<script>
    // Global variables
    let imageCount = 0;
    const cropperInstances = {};
    const maxImageCount = 5;
    
    // Function to delete a single image
    function deleteSingleImage(imageName, productId) {
        console.log("Delete request:", imageName, productId);

        Swal.fire({
            title: "Are you sure?",
            text: "This image will be permanently deleted.",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#d33",
            cancelButtonColor: "#3085d6",
            confirmButtonText: "Yes, delete it!"
        }).then((result) => {
            if (result.isConfirmed) {
                showLoading();
                
                fetch("/admin/delete-image", {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ 
                        imageNameToServer: imageName,  
                        productIdToServer: productId  
                    })
                })
                .then(response => response.json())
                .then(data => {
                    hideLoading();
                    
                    if (data.status) {
                        Swal.fire({
                            title: "Deleted!",
                            text: "The image has been removed successfully.",
                            icon: "success",
                            timer: 2000,
                            showConfirmButton: false
                        });

                        // Remove the image from the UI
                        document.querySelectorAll(".thumbnail").forEach(thumbnail => {
                            let imgElement = thumbnail.querySelector("img");
                            if (imgElement && imgElement.src.includes(imageName.replace('_', '_/'))) {
                                thumbnail.remove();
                            }
                        });
                    } else {
                        Swal.fire("Failed!", data.message || "Could not delete image. Please try again.", "error");
                    }
                })
                .catch(error => {
                    hideLoading();
                    console.error("Error deleting image:", error);
                    Swal.fire("Error!", "An unexpected error occurred.", "error");
                });
            }
        });
    }

    // Function to show loading overlay
    function showLoading() {
        document.getElementById('loadingOverlay').classList.add('active');
    }
    
    // Function to hide loading overlay
    function hideLoading() {
        document.getElementById('loadingOverlay').classList.remove('active');
    }

    // Function to validate form
    function validateForm() {
        clearErrorMessages();
        
        const productName = document.querySelector('[name="productName"]');
        const description = document.querySelector('[name="description"]');
        const regularPrice = document.querySelector('[name="regularPrice"]');
        const salePrice = document.querySelector('[name="salePrice"]');
        const color = document.querySelector('[name="color"]');
        
        let isValid = true;
        
        // Validate product name
        if (!productName.value.trim()) {
            displayErrorMessage('productName-error', 'Product name is required');
            productName.classList.add('is-invalid');
            isValid = false;
        } else {
            productName.classList.remove('is-invalid');
        }
        
        // Validate description
        if (!description.value.trim()) {
            displayErrorMessage('description-error', 'Product description is required');
            description.classList.add('is-invalid');
            isValid = false;
        } else {
            description.classList.remove('is-invalid');
        }
        
        // Validate regular price
        const priceRegex = /^\d+(\.\d{1,2})?$/;
        if (!regularPrice.value.trim() || !priceRegex.test(regularPrice.value)) {
            displayErrorMessage('regularPrice-error', 'Enter a valid price (e.g., 9.99)');
            regularPrice.classList.add('is-invalid');
            isValid = false;
        } else {
            regularPrice.classList.remove('is-invalid');
        }
        
        // Validate sale price (if provided)
        if (salePrice.value.trim() && !priceRegex.test(salePrice.value)) {
            displayErrorMessage('salePrice-error', 'Enter a valid sale price (e.g., 9.99)');
            salePrice.classList.add('is-invalid');
            isValid = false;
        } else if (salePrice.value.trim() && parseFloat(salePrice.value) >= parseFloat(regularPrice.value)) {
            displayErrorMessage('salePrice-error', 'Sale price must be less than regular price');
            salePrice.classList.add('is-invalid');
            isValid = false;
        } else {
            salePrice.classList.remove('is-invalid');
        }
        
        
        // Validate color
        if (!color.value.trim()) {
            displayErrorMessage('color-error', 'Color is required');
            color.classList.add('is-invalid');
            isValid = false;
        } else {
            color.classList.remove('is-invalid');
        }

        // Validate Size & Quantity
        let sizeInputs = document.querySelectorAll(".size-quantity");
        let hasValidSize = false;
    
        sizeInputs.forEach(input => {
            let value = Number(input.value);
            if (value > 0) {
                hasValidSize = true;
            } else if (value < 0) {
                displayErrorMessage('size-error', 'Size quantity cannot be negative.');
                isValid = false;
            }
        });
    
        if (!hasValidSize) {
            displayErrorMessage('size-error', 'At least one size must have a quantity.');
            isValid = false;
        }
        
        // Validate file types
        const imageInputs = document.querySelectorAll('input[type="file"]');
        for (let i = 0; i < imageInputs.length; i++) {
            if (imageInputs[i].files && imageInputs[i].files[0]) {
                const file = imageInputs[i].files[0];
                const validTypes = ['image/jpeg', 'image/jpg', 'image/png'];
                
                if (!validTypes.includes(file.type)) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Invalid File Type',
                        text: `Please upload only JPEG, JPG or PNG image files.`,
                        confirmButtonColor: '#3085d6'
                    });
                    isValid = false;
                    break;
                }
            }
        }
        
        return isValid;
    }
    
    // Function to display error message
    function displayErrorMessage(elementId, message) {
        const errorElement = document.getElementById(elementId);
        if (errorElement) {
            errorElement.textContent = message;
        }
    }
    
    // Function to clear all error messages
    function clearErrorMessages() {
        document.querySelectorAll('.error-message').forEach(element => {
            element.textContent = '';
        });
        
        document.querySelectorAll('.is-invalid').forEach(element => {
            element.classList.remove('is-invalid');
        });
    }
    
    // Function to count existing images
    function countExistingImages() {
        return document.querySelectorAll('.thumbnail').length;
    }
    
    // Function to add image upload field
    function addImageUploadField(index) {
        const container = document.getElementById("image-container");
        
        const imageUploadDiv = document.createElement("div");
        imageUploadDiv.classList.add("image-upload");
        imageUploadDiv.setAttribute("id", `image-upload-${index}`);
        imageUploadDiv.innerHTML = `
            <label class="form-label">Image ${index}</label>
            <input class="form-control" type="file" 
                name="image${index}"
                id="input${index}" 
                accept="image/png, image/jpeg, image/jpg">
            <div class="image-preview">
                <img src="" alt="" id="imgView${index}">
                <button type="button" class="edit-preview-btn" onclick="editImage(${index})">Edit</button>
                <button type="button" class="delete-btn" onclick="deleteImage(${index})">Delete</button>
            </div>
            <div class="image-cropper" id="cropper-container${index}" style="display:none;">
                <div class="cropper-container">
                    <img src="" id="cropperImg${index}" alt="">
                </div>
                <div class="cropper-controls">
                    <button type="button" class="btn-sm btn-primary" onclick="rotateImage(-90, ${index})">
                        <i class="fas fa-undo"></i>
                    </button>
                    <button type="button" class="btn-sm btn-primary" onclick="rotateImage(90, ${index})">
                        <i class="fas fa-redo"></i>
                    </button>
                    <button type="button" id="saveButton${index}" class="btn-sm btn-primary">Save Crop</button>
                    <button type="button" class="btn-sm btn-primary" onclick="cancelCrop(${index})">Cancel</button>
                </div>
            </div>
        `;
        
        container.appendChild(imageUploadDiv);
        
        // Add event listener for the file input
        document.getElementById(`input${index}`).addEventListener('change', function(event) {
            viewImage(event, index);
        });
    }
    
    // Function to view image with file type validation
    function viewImage(event, index) {
        const input = event.target;
        const imgView = document.getElementById(`imgView${index}`);
        
        if (input.files && input.files[0]) {
            const file = input.files[0];
            
            // Check file type
            const validTypes = ['image/jpeg', 'image/jpg', 'image/png'];
            if (!validTypes.includes(file.type)) {
                // Clear the file input
                input.value = '';
                
                // Show error using SweetAlert
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid File Type',
                    text: 'Please upload only JPEG, JPG or PNG image files.',
                    confirmButtonColor: '#3085d6'
                });
                return;
            }
            
            const reader = new FileReader();
            
            reader.onload = function(e) {
                imgView.src = e.target.result;
                imgView.style.display = 'block';
            };
            
            reader.readAsDataURL(file);
        }
    }
    
    // Function to edit image
    function editImage(index) {
        const input = document.getElementById(`input${index}`);
        const cropperContainer = document.getElementById(`cropper-container${index}`);
        const cropperImg = document.getElementById(`cropperImg${index}`);
        
        if (input.files && input.files[0]) {
            const reader = new FileReader();
            
            reader.onload = function(e) {
                cropperImg.src = e.target.result;
                cropperContainer.style.display = 'flex';
                
                // Initialize Cropper.js
                if (cropperInstances[index]) {
                    cropperInstances[index].destroy();
                }
                
                cropperInstances[index] = new Cropper(cropperImg, {
                    aspectRatio: 1,
                    viewMode: 1,
                    dragMode: 'move',
                    autoCropArea: 0.8,
                    restore: false,
                    guides: true,
                    center: true,
                    highlight: false,
                    cropBoxMovable: true,
                    cropBoxResizable: true,
                    toggleDragModeOnDblclick: false
                });
            };
            
            reader.readAsDataURL(input.files[0]);
        }
        
        // Add event listener for the save button
        document.getElementById(`saveButton${index}`).addEventListener('click', function() {
            saveCrop(index);
        });
    }
    
    // Function to save cropped image
    function saveCrop(index) {
        if (cropperInstances[index]) {
            const canvas = cropperInstances[index].getCroppedCanvas({
                width: 800,
                height: 800
            });
            
            const imgView = document.getElementById(`imgView${index}`);
            imgView.src = canvas.toDataURL('image/jpeg');
            
            // Convert canvas to blob and set it as the file input value
            canvas.toBlob(function(blob) {
                const file = new File([blob], `cropped-image-${index}.jpg`, {
                    type: 'image/jpeg',
                    lastModified: new Date().getTime()
                });
                
                const container = new DataTransfer();
                container.items.add(file);
                
                document.getElementById(`input${index}`).files = container.files;
            }, 'image/jpeg');
            
            // Hide cropper container
            document.getElementById(`cropper-container${index}`).style.display = 'none';
        }
    }
    
    // Function to cancel crop
    function cancelCrop(index) {
        document.getElementById(`cropper-container${index}`).style.display = 'none';
        
        if (cropperInstances[index]) {
            cropperInstances[index].destroy();
            delete cropperInstances[index];
        }
    }
    
    // Function to rotate image
    function rotateImage(degree, index) {
        if (cropperInstances[index]) {
            cropperInstances[index].rotate(degree);
        }
    }
    
    // Function to delete image
    function deleteImage(index) {
        const container = document.getElementById("image-container");
        const imageUploadDiv = document.getElementById(`image-upload-${index}`);
        
        if (imageUploadDiv) {
            container.removeChild(imageUploadDiv);
            
            if (cropperInstances[index]) {
                cropperInstances[index].destroy();
                delete cropperInstances[index];
            }
            
            imageCount--;
        }
    }
    
    // Event listener for the Add Image button
    document.getElementById('addImageBtn').addEventListener('click', function() {
        const existingImageCount = countExistingImages();
        const newImageCount = existingImageCount + imageCount;
        
        if (newImageCount < maxImageCount) {
            imageCount++;
            addImageUploadField(imageCount);
        } else {
            Swal.fire({
                icon: 'warning',
                title: 'Maximum Images Reached',
                text: `You can only upload a maximum of ${maxImageCount} images.`,
                timer: 3000,
                timerProgressBar: true
            });
        }
    });
    
    // Event listener for the Update Product button
    document.getElementById('updateBtn').addEventListener('click', function() {
        if (validateForm()) {
            showLoading();
            document.getElementById('editProductForm').submit();
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Form Validation Error',
                text: 'Please correct the errors in the form before submitting.',
                timer: 3000,
                timerProgressBar: true
            });
        }
    });
    
    // Initialize the page
    document.addEventListener('DOMContentLoaded', function() {
        // Update hidden size field on load
        updateSizesHiddenField();
        
        // Add image field if needed
        if (countExistingImages() < maxImageCount) {
            addImageUploadField(++imageCount);
        }
        
        // Add listeners for size inputs
        document.querySelectorAll('.size-quantity').forEach(input => {
            input.addEventListener('input', updateSizesHiddenField);
        });
    });
    
    // Function to update sizes hidden field
    function updateSizesHiddenField() {
        let sizes = document.querySelectorAll('.size-quantity');
        let sizeData = [];

        sizes.forEach(input => {
            let size = input.id.split('-')[1]; // Extract size from the input id
            let quantity = parseInt(input.value) || 0;

            if (quantity > 0) {  
                sizeData.push({ size: size, quantity: quantity });
            }
        });

        document.getElementById('sizesWithQuantities').value = JSON.stringify(sizeData);
        console.log("Updated Sizes Data:", sizeData); // Debugging
    }
</script>