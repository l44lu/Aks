<%- include("../../views/partials/admin/header") %>
<head>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-bg: #1a1a1a;
            --card-bg: #212121;
            --input-bg: #2a2a2a;
            --border-color: #3a3a3a;
            --text-color: #e0e0e0;
            --title-color: #ffffff;
            --accent-color: #a0a0a0;
            --hover-color: #c2c2c2;
            --shadow-color: rgba(0, 0, 0, 0.6);
        }
        
        body {
            background: var(--primary-bg);
            color: var(--text-color);
            font-family: 'Poppins', sans-serif;
            margin: 0;
            padding: 0;
        }
        
        .dashboard-container {
            max-width: 1318px;
            margin: 40px auto;
            padding: 0px 50px;
        }
        
        .content-header {
            margin-bottom: 30px;
            position: relative;
        }
        
        .content-title {
            font-size: 28px;
            font-weight: 700;
            color: var(--title-color);
            margin-bottom: 10px;
            letter-spacing: 0.5px;
            position: relative;
            display: inline-block;
        }
        
        .content-title::after {
            content: '';
            position: absolute;
            bottom: -8px;
            left: 0;
            width: 251px;
            height: 4px;
            background: #717171;
            border-radius: 2px;
            border-top-left-radius: 2px;
            border-top-right-radius: 2px;
            border-bottom-right-radius: 2px;
            border-bottom-left-radius: 2px;
        }


        
        .card {
            background: var(--card-bg);
            border-radius: 16px;
            overflow: hidden;
            box-shadow: 0 10px 20px var(--shadow-color);
            margin-bottom: 30px;
            transition: transform 0.3s, box-shadow 0.3s;
        }
        
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px var(--shadow-color);
        }
        
        .card-header {
            padding: 20px 25px;
            border-bottom: 1px solid var(--border-color);
            display: flex;
            align-items: center;
        }
        
        .card-header h4 {
            margin: 5px;
            margin-right: -175px;
            font-size: 18px;
            font-weight: 600;
            color: var(--title-color);
            display: flex;
            align-items: center;
        }
        
        .card-header h4 i {
            margin-right: 10px;
            color: #8d8d8d;
        }
        
        .card-body {
            padding: 25px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-label {
            display: block;
            font-weight: 500;
            margin-bottom: 8px;
            color: var(--text-color);
            font-size: 14px;
        }
        
        .form-control, .form-select {
            width: 100%;
            background: var(--input-bg);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 12px 15px;
            color: var(--text-color);
            font-size: 14px;
            transition: all 0.3s;
        }
        
        .form-control:focus, .form-select:focus {
            border-color: var(--accent-color);
            box-shadow: 0 0 0 3px rgba(108, 92, 231, 0.2);
            outline: none;
        }
        
        .error-message {
            color: #ff6b6b;
            font-size: 12px;
            margin-top: 5px;
            display: block;
        }
        
        .btn {
            padding: 12px 30px;
            border-radius: 8px;
            font-weight: 600;
            font-size: 15px;
            transition: all 0.3s;
            border: none;
            cursor: pointer;
        }
        
        .btn-primary {
            background: #0088ff;
            color: white;
        }
        
        .btn-primary:hover {
            background: var(--hover-color);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(108, 92, 231, 0.4);
        }
        
        .image-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 20px;
        }
        
        .image-upload-container {
            background: var(--input-bg);
            border-radius: 10px;
            padding: 15px;
            text-align: center;
            border: 2px dashed var(--border-color);
            transition: all 0.3s;
        }
        
        .image-upload-container:hover {
            border-color: var(--accent-color);
        }
        
        .image-preview {
            width: 100%;
            height: 120px;
            border-radius: 8px;
            background: #333;
            object-fit: cover;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .image-preview::before {
            content: 'Preview';
            color: #777;
            font-size: 14px;
        }
        
        .thumbnails-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
            gap: 15px;
            margin-top: 15px;
        }
        
        .thumbnail {
            position: relative;
            border-radius: 8px;
            overflow: hidden;
            border: 1px solid var(--border-color);
        }
        
        .thumbnail img {
            width: 100%;
            height: 100px;
            object-fit: cover;
        }
        
        .remove-image-btn {
            position: absolute;
            top: 5px;
            right: 5px;
            background: rgba(0, 0, 0, 0.6);
            border-radius: 50%;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .remove-image-btn:hover {
            background: rgba(255, 0, 0, 0.8);
        }
        
        .section-title {
            font-weight: 600;
            margin-bottom: 15px;
            color: var(--title-color);
            font-size: 16px;
            padding-bottom: 8px;
            border-bottom: 1px solid var(--border-color);
        }
        
        @media (max-width: 991px) {
            .image-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }
        
        @media (max-width: 767px) {
            .dashboard-container {
                margin: 20px auto;
            }
            
            .content-title {
                font-size: 24px;
            }
            
            .card-body {
                padding: 20px;
            }
            
            .form-group-row {
                flex-direction: column;
            }
            
            .form-group-col {
                width: 100%;
                padding: 0;
            }
        }
    </style>
</head>

<div class="dashboard-container">
    <div class="content-header">
        <h2 class="content-title">Edit Product</h2>
        <p>Update your product information and inventory</p>
    </div>
    
    <form method="post" action="/admin/editProduct/<%=product._id%>" enctype="multipart/form-data" id="editProductForm">
        <div class="card">
            <div class="card-header">
                <h4><i class="fas fa-info-circle"></i> Basic Information</h4>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input type="text" name="productName" value="<%=product.productName%>" class="form-control" id="product_name" placeholder="Enter product name">
                            <span id="productName-error" class="error-message"></span>
                        </div>
                    </div>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Full Description</label>
                    <textarea name="description" class="form-control" rows="4" placeholder="Enter product description"><%=product.description%></textarea>
                    <span id="description-error" class="error-message"></span>
                </div>
                
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="form-label">Category</label>
                            <select class="form-select" name="category">
                                <% if (cat && cat.length > 0) { %>
                                    <% for (let i = 0; i < cat.length; i++) { %>
                                        <option value="<%= cat[i].name %>" <% if(cat[i].name === product.category) { %> selected <% } %>>
                                            <%= cat[i].name %>
                                        </option>
                                    <% } %>
                                <% } else { %>
                                    <option value="">No Categories Available</option>
                                <% } %>
                            </select>
                            <span id="category-error" class="error-message"></span>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="form-label">Color</label>
                            <input name="color" type="text" value="<%=product.color%>" class="form-control" placeholder="e.g. Red, Blue, Black">
                            <span id="color-error" class="error-message"></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card">
            <div class="card-header">
                <h4><i class="fas fa-tag"></i> Pricing & Inventory</h4>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            <label class="form-label">Regular Price ($)</label>
                            <input placeholder="0.00" name="regularPrice" type="text" value="<%=product.regularPrice%>" class="form-control">
                            <span id="regularPrice-error" class="error-message"></span>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label class="form-label">Sale Price ($)</label>
                            <input name="salePrice" type="text" value="<%=product.salePrice%>" class="form-control" placeholder="0.00">
                            <span id="salePrice-error" class="error-message"></span>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label class="form-label">Quantity</label>
                            <input name="quantity" type="text" value="<%=product.quantity%>" class="form-control" placeholder="0">
                            <span id="quantity-error" class="error-message"></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card">
            <div class="card-header">
                <h4><i class="fas fa-images"></i> Product Images</h4>
            </div>
            <div class="card-body">
                <div class="section-title">Current Images</div>
                <div class="thumbnails-container">
                    <% if(product.productImage && product.productImage.length > 0) { %>
                        <% for(let i = 0; i < product.productImage.length; i++) { %>
                            <div class="thumbnail">
                                <input type="hidden" value="<%=product.productImage[i]%>" name="existingImages">
                                <img src="/uploads/re-image/<%=product.productImage[i]%>" alt="Product image">
                                <div class="remove-image-btn">
                                    <i class="fas fa-times" onclick="deleteSingleImage('<%=product.productImage[i]%>','<%=product._id%>')"></i>
                                </div>
                            </div>
                        <% } %>
                    <% } else { %>
                        <p>No images available</p>
                    <% } %>
                </div>
                
                <div class="section-title mt-4">Add New Images</div>
                <div class="image-grid">
                    <div class="image-upload-container">
                        <div class="image-preview" id="imgView1"></div>
                        <input class="form-control" type="file" name="images" id="input1" accept="image/png, image/jpeg, image/jpg" onchange="viewImage(event, 1)">
                    </div>
                    <div class="image-upload-container">
                        <div class="image-preview" id="imgView2"></div>
                        <input class="form-control" type="file" name="images" id="input2" accept="image/png, image/jpeg, image/jpg" onchange="viewImage(event, 2)">
                    </div>
                    <div class="image-upload-container">
                        <div class="image-preview" id="imgView3"></div>
                        <input class="form-control" type="file" name="images" id="input3" accept="image/png, image/jpeg, image/jpg" onchange="viewImage(event, 3)">
                    </div>
                    <div class="image-upload-container">
                        <div class="image-preview" id="imgView4"></div>
                        <input class="form-control" type="file" name="images" id="input4" accept="image/png, image/jpeg, image/jpg" onchange="viewImage(event, 4)">
                    </div>
                </div>
                <span id="images-error" class="error-message text-center d-block mt-3"></span>
            </div>
        </div>
        
        <div class="text-center mb-5">
            <button class="btn btn-primary px-5" id="updatebtn" type="submit" onclick="validateFormAndSubmit()">
                <i class="fas fa-save mr-2"></i> Update Product
            </button>
        </div>
    </form>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script>
    function validateFormAndSubmit() {
        if (validateForm()) {
            document.getElementById('editProductForm').submit();
        }
    }
    
    function validateForm() {
        console.log("Validating form...");
        clearErrorMessages();
        
        const name = document.getElementsByName('productName')[0].value;
        const description = document.getElementsByName('description')[0].value;
        const price = document.getElementsByName('regularPrice')[0].value;
        const salePrice = document.getElementsByName('salePrice')[0].value;
        const color = document.getElementsByName('color')[0].value;
        const quantityInput = document.getElementsByName('quantity')[0].value;
        
        const existingImages = document.getElementsByName('existingImages');
        const hasExistingImages = existingImages && existingImages.length > 0;
        
        const newImages = [
            document.getElementById('input1'),
            document.getElementById('input2'),
            document.getElementById('input3'),
            document.getElementById('input4')
        ];
        
        const hasNewImages = newImages.some(input => input && input.files && input.files.length > 0);
        
        let isValid = true;
        
        if (name.trim() === "") {
            displayErrorMessage('productName-error', 'Please enter a product name.');
            isValid = false;


    try {
        const { imageNameToServer, productIdToServer } = req.body;
        
        if (!imageNameToServer || !productIdToServer) {
            return res.status(400).send({ status: false, message: "Missing image name or product ID" });
        }
        
         Product.findByIdAndUpdate(
            productIdToServer,
            { $pull: { productImage: imageNameToServer } },
            { new: true }
        );
        
        const imagePath = path.join(__dirname, '../public/uploads/re-image/', imageNameToServer);
        
        if (fs.existsSync(imagePath)) {
            fs.unlinkSync(imagePath);
            console.log(`Image ${imageNameToServer} deleted successfully`);
        } else {
            console.log(`Image ${imageNameToServer} not found in filesystem`);
        }
        
        res.send({ status: true, message: "Image deleted successfully" });
    } catch (error) {
        console.error('Error in deleteSingleImage:', error);
        res.status(500).send({ status: false, message: "Failed to delete image" });
    }
};


        }
        

        if (description.trim() === '') {
            displayErrorMessage('description-error', 'Please enter a product description.');
            isValid = false;
        }
        

        if (quantityInput.trim() === "" || isNaN(parseInt(quantityInput)) || parseInt(quantityInput) < 0) {
            displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
            isValid = false;
        }
        

        if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
            displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
            isValid = false;
        }

        if (salePrice.trim() !== "" && (!/^\d+(\.\d{1,2})?$/.test(salePrice) || parseFloat(salePrice) < 0)) {
            displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price.');
            isValid = false;
        }

        if (color.trim() === "") {
            displayErrorMessage('color-error', 'Please enter a color.');
            isValid = false;
        }

        if (!hasExistingImages && !hasNewImages) {
            displayErrorMessage("images-error", 'Please select at least one image.');
            isValid = false;
        }
        
        return isValid;
    

    function displayErrorMessage(elementId, message) {
        const errorElement = document.getElementById(elementId);
        if (errorElement) {
            errorElement.innerText = message;
            errorElement.style.display = "block";
        }
    }

    function clearErrorMessages() {
        const errorElements = document.getElementsByClassName('error-message');
        Array.from(errorElements).forEach(element => {
            element.innerText = '';
        });
    }

    function viewImage(event, index) {
        const input = event.target;
        if (input.files && input.files[0]) {
            const reader = new FileReader();
            
            reader.onload = function (e) {
                const imagePreview = document.getElementById('imgView' + index);
                imagePreview.innerHTML = '';
                
                const img = document.createElement('img');
                img.src = e.target.result;
                img.alt = "Preview";
                img.style.maxWidth = "100%";
                img.style.maxHeight = "100%";
                
                imagePreview.appendChild(img);
            };
            
            reader.readAsDataURL(input.files[0]);
        }
    }
    
    const deleteSingleImage = async (req, res) => {
    try {
        const { imageNameToServer, productIdToServer } = req.body;
        
        if (!imageNameToServer || !productIdToServer) {
            return res.status(400).send({ 
                status: false, 
                message: "Missing image name or product ID" 
            });
        }
        
        const updatedProduct = await Product.findByIdAndUpdate(
            productIdToServer,
            { $pull: { productImage: imageNameToServer } },
            { new: true }
        );

        if (!updatedProduct) {
            return res.status(404).send({
                status: false,
                message: "Product not found"
            });
        }

        const imagePath = path.join(__dirname, '../public/uploads/re-image/', imageNameToServer);
        
        if (fs.existsSync(imagePath)) {
            fs.unlinkSync(imagePath);
            console.log(`Image ${imageNameToServer} deleted successfully`);
        } else {
            console.log(`Image ${imageNameToServer} not found in filesystem`);
        }
        
        res.send({ 
            status: true, 
            message: "Image deleted successfully" 
        });
    } catch (error) {
        console.error('Error in deleteSingleImage:', error);
        res.status(500).send({ 
            status: false, 
            message: "Failed to delete image" 
        });
    }
};
</script>

<%- include("../../views/partials/admin/footer") %>