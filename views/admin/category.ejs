<%- include("../../views/partials/admin/header") %>
<head>

</head>
<body>
  <section class="content-main">
    <div class="content-header">
      <div>
        <h2 class="content-title card-title">Category</h2>
      </div>
    </div>
    <header class="card-header text-center mb-20">
      <form action="/admin/category/" method="get" class="d-inline">
        <div class="input-group input-group-sm border border-1 border-grey rounded-pill" style="width: 500px; margin-left: 230px">
          <input type="text" class="form-control border-0 rounded-pill mt-3" placeholder="Search categories" name="search"/>
          <button class="btn" type="submit">Search</button>
        </div>
      </form>
    </header>
    <div class="card">
      <div class="card-body">
        <div class="row">
          <div class="col-md-3">
            <form method="post" action="/admin/addCategory" onsubmit="return handleFormSubmit(event)">
              <div class="mb-4">
                <label for="product_name" class="form-label">Name</label>
                <input type="text" name="name" placeholder="Type here" class="form-control" id="product_name" required/>
                <div id="name-error" class="error-message"></div>
              </div>
              <div class="mb-4">
                <label class="form-label">Description</label>
                <textarea placeholder="Type here" name="description" class="form-control" id="descriptionId" required></textarea>
                <div id="description-error" class="error-message"></div>
              </div>
              <div class="d-grid">
                <button class="btn btn-primary" type="submit">
                  Create category
                </button>
              </div>
            </form>
          </div>
          <div class="col-md-8 ml-10">
            <div class="table-responsive">
              <table class="table table-hover">
                <thead>
                  <tr>
                    <th class="text-center"></th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Offer Price</th>
                    <th>Offer</th>
                    <th>Status</th>
                    <th>List/Unlist</th>
                    <th class="text-start">Edit</th>
                  </tr>
                </thead>
                <tbody>
                  <% category.forEach(category => { %>
                    <tr>
                      <td></td>
                      <td class="text-start"><%= category.name %></td>
                      <td class="text-start"><%= category.description %></td>
                      <td>
                        <%if(category.categoryOffer){%>
                          <%=category.categoryOffer%>
                          <%}else{%>
                            0%
                            <%}%>
                      </td>

                      <td class="text-start">
                        <% if(!category.categoryOffer || category.categoryOffer === 0) { %>
                          <button class="btn ash-grey-btn" style="width: 100px">
                            <a href="#" class="text-white" onclick="addOffer('<%=category._id%>')">Add Offer</a>
                          </button>
                        <% } else { %>
                          <button class="btn ash-grey-btn" style="width: 100px">
                            <a href="#" class="text-white" onclick="removeOffer('<%=category._id%>')">Remove</a>
                          </button>
                        <% } %>
                      </td>
                      
                      
                      <td class="text-start">
                        <% if (category.isListed) { %>
                          <span class="badge rounded-pill alert-success" style="width: 60px">Listed</span>
                        <% } else { %>
                          <span class="badge rounded-pill alert-danger" style="width: 60px">Unlisted</span>
                        <% } %>
                      </td>
                      
                      <td class="text-start">
                        <% if (category.isListed) { %>
                          <button class="btn btn-danger" style="width: 70px" onclick="changeCategoryStatus('<%= category._id %>', 'unlist')">
                            Unlist
                          </button>
                        <% } else { %>
                          <button class="btn btn-success" style="width: 70px" onclick="changeCategoryStatus('<%= category._id %>', 'list')">
                            List
                          </button>
                        <% } %>
                      </td>
                      
                      <td class="text-start">
                        <a href="/admin/editCategory?id=<%=category._id%>" class="btn edit-btn">Edit</a>
                      </td>
                      
                    </tr>
                    <% }) %>
                </tbody>
                
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="pagination-container text-center mt-4">
      <nav>
        <ul class="pagination justify-content-center">
          <% if(currentPage > 1) { %>
            <li class="page-item">
              <a class="page-link" href="?page=<%= currentPage - 1 %>">&laquo; Previous</a>
            </li>
          <% } %>
    
          <% for(let i = 1; i <= totalPage; i++) { %>
            <li class="page-item <%= i === currentPage ? 'active' : '' %>">
              <a class="page-link" href="?page=<%= i %>"><%= i %></a>
            </li>
          <% } %>
    
          <% if(currentPage < totalPage) { %>
            <li class="page-item">
              <a class="page-link" href="?page=<%= currentPage + 1 %>">Next &raquo;</a>
            </li>
          <% } %>
        </ul>
      </nav>
    </div>
    

<script>


  function validateForm() {
      clearErrorMessage();
      const name = document.getElementById("product_name").value.trim();
      const description = document.getElementById("descriptionId").value.trim();
      let isValid = true;

      if (name === "") {
          displayErrorMessage("name-error", "Please enter a name");
          isValid = false;
      } else if (!/^[a-zA-Z\s]+$/.test(name)) {
          displayErrorMessage("name-error", "Category name should contain only alphabetic characters");
          isValid = false;
      }

      if (description === "") {
          displayErrorMessage("description-error", "Please enter a description");
          isValid = false;
      }

      return isValid;
  }

  function handleFormSubmit(event) {
      event.preventDefault();
      if (!validateForm()) {
          return;
      }

      const name = document.getElementsByName("name")[0].value;
      const description = document.getElementById("descriptionId").value;

      fetch("/admin/addCategory", {
          method: "POST",
          headers: {
              "Content-Type": "application/json"
          },
          body: JSON.stringify({ name, description })
      }).then(response => {
          if (!response.ok) {
              return response.json().then(err => {
                  throw new Error(err.error);
              });
          }
          return response.json();
      }).then(data => {
          location.reload();
      }).catch(error => {
          Swal.fire({
              icon: "error",
              title: "Oops",
              text: error.message === "Category already exists" ? "Category already exists" : "An error occurred"
          });
      });
  }

  function displayErrorMessage(elementId, message) {
      var errorElement = document.getElementById(elementId);
      errorElement.innerText = message;
      errorElement.style.display = "block";
  }

  function changeCategoryStatus(categoryId, action) {
    let url = action === 'list' ? '/admin/listCategory' : '/admin/unlistCategory';
    fetch(`${url}?id=${categoryId}`, {
      method: 'GET',
    })
    .then(response => {
      if (response.ok) {
        location.reload();
      } else {
        alert("Failed to update category status.");
      }
    })
    .catch(error => {
      console.error("Error updating category status:", error);
    });
  }

  function clearErrorMessage() {
      const errorElements = document.getElementsByClassName("error-message");
      Array.from(errorElements).forEach((element) => {
          element.innerText = "";
          element.style.display = "none";
      });
  }

  async function addOffer(categoryId) {
  const { value: amount, dismiss } = await Swal.fire({
    title: "Offer in percentage",
    input: "number",
    inputLabel: "Percentage",
    inputPlaceholder: "%",
    inputAttributes: {
      min: 0,
      max: 99,
      step: 1
    },
    showCancelButton: true,
    inputValidator: (value) => {
      if (!value) {
        return "You need to enter a percentage!";
      }
      if (value < 1 || value > 99) {
        return "Percentage must be between 1 and 99";
      }
    }
  });
  
  if (dismiss) return; 
  
  if (amount) {
    try {
      Swal.fire({
        title: 'Adding offer...',
        text: 'Please wait',
        allowOutsideClick: false,
        didOpen: () => {
          Swal.showLoading();
        }
      });
      
      const response = await fetch("/admin/addCategoryOffer", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          percentage: amount,
          categoryId: categoryId,
        }),
      });
      
      const data = await response.json();
      
      if (response.ok && data.status === true) {
        Swal.fire({
          icon: "success",
          title: "Offer added",
          text: "The offer has been added successfully",
        }).then(() => {
          window.location.href = window.location.pathname; 
        });
      } else {
        Swal.fire({
          icon: "error",
          title: "Failed",
          text: data.message || "Adding offer failed"
        });
      }
    } catch (error) {
      console.error("Error adding offer:", error);
      Swal.fire({
        icon: "error",
        title: "Error",
        text: "An error occurred while adding the offer. Please try again."
      });
    }
  }
}

  async function removeOffer(categoryId) {
  try {
    Swal.fire({
      title: 'Removing offer...',
      text: 'Please wait',
      allowOutsideClick: false,
      didOpen: () => {
        Swal.showLoading();
      }
    });
    
    const response = await fetch("/admin/removeCategoryOffer", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        categoryId: categoryId,
      }),
    });

    const data = await response.json();
    
    if (response.ok && data.status === true) {
      Swal.fire({
        icon: "success",
        title: "Offer removed",
        text: "The offer has been removed successfully",
      }).then(() => {
        window.location.href = window.location.pathname; 
      });
    } else {
      console.error("Server response:", data);
      Swal.fire({
        icon: "error",
        title: "Failed",
        text: data.message || "Removing offer failed. Please try again."
      });
    }
  } catch (error) {
    console.error("Error removing offer:", error);
    Swal.fire({
      icon: "error",
      title: "Error",
      text: "An error occurred while removing the offer. Please try again."
    });
  }
}
</script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

<%- include("../../views/partials/admin/footer") %>
