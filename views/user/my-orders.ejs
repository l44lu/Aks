<%- include("../../views/partials/user/profileMain") %>

<style>
  /* Luxury fashion brand styling */
  .orders-container {
    max-width: 1200px;
    margin: 40px auto;
    font-family: 'Didot', 'Times New Roman', serif;
    color: #1a1a1a;
  }
  
  /* Empty state styling */
  .empty-state {
    text-align: center;
    padding: 80px 40px;
    background: #fff;
    border: 1px solid #e0e0e0;
    margin-bottom: 40px;
  }
  
  .empty-state i {
    font-size: 60px;
    color: #1a1a1a;
    margin-bottom: 4px;
  }
  
  .empty-state h3 {
    font-size: 24px;
    font-weight: 400;
    letter-spacing: 3px;
    text-transform: uppercase;
    margin-bottom: 15px;
  }
  
  .empty-state p {
    font-size: 16px;
    color: #777;
    margin-bottom: 30px;
  }
  
  /* Order card styling */
  .order-card {
    background: #fff;
    margin-bottom: 30px;
    border: none;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  }
  
  .order-header {
    padding: 25px 30px;
    border-bottom: 1px solid #f0f0f0;
  }
  
  .order-header h4 {
    font-size: 18px;
    font-weight: 400;
    letter-spacing: 2px;
    margin: 0;
  }
  
  .order-header .text-muted {
    font-size: 14px;
    color: #888;
  }
  
  .status-badge {
    display: inline-block;
    padding: 6px 15px;
    border-radius: 2px;
    font-size: 12px;
    text-transform: uppercase;
    letter-spacing: 1px;
    font-weight: 400;
  }
  
  .status-badge i {
    font-size: 8px;
    vertical-align: middle;
  }
  
  .status-delivered {
    background-color: #f0f7f0;
    color: #356635;
  }
  
  .status-pending {
    background-color: #fef8e8;
    color: #8a6d3b;
  }
  
  .status-payment {
    background-color: #fef0f0;
    color: #a94442;
  }
  
  .status-processing {
    background-color: #f0f6fe;
    color: #31708f;
  }
  
  .order-content {
    padding: 30px;
  }
  
  .order-info {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 15px;
    margin-bottom: 40px;
    font-size: 14px;
    color: #555;
  }
  
  .info-item {
    line-height: 1.6;
  }
  
  .info-item strong {
    font-weight: 500;
    letter-spacing: 1px;
    text-transform: uppercase;
    font-size: 12px;
    color: #1a1a1a;
  }
  
  .products-list {
    margin-bottom: 40px;
  }
  
  .products-list h5 {
    font-size: 16px;
    font-weight: 400;
    letter-spacing: 2px;
    text-transform: uppercase;
    margin-bottom: 20px;
    padding-bottom: 10px;
    border-bottom: 1px solid #f0f0f0;
  }
  
  .product-card {
    display: flex;
    margin-bottom: 20px;
    padding-bottom: 20px;
    border-bottom: 1px solid #f8f8f8;
  }
  
  .product-image {
    width: 100px;
    height: 120px;
    object-fit: cover;
    margin-right: 20px;
  }
  
  .product-info {
    flex: 1;
  }
  
  .product-info h5 {
    font-size: 16px;
    font-weight: 400;
    letter-spacing: 1px;
    border: none;
    padding: 0;
    margin: 0 0 10px 0;
  }
  
  .product-info p {
    font-size: 14px;
    color: #666;
    margin-bottom: 10px;
  }
  
  .return-section {
    margin-top: 15px;
  }
  
  .return-reason-select {
    background-color: #f9f9f9;
    border: 1px solid #ddd;
    font-size: 13px;
    font-family: 'Didot', 'Times New Roman', serif;
    padding: 8px 12px;
    border-radius: 0;
  }
  
  .order-actions {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
  }
  
  /* Buttons styling */
  .btn-custom {
    padding: 10px 20px;
    font-size: 12px;
    letter-spacing: 1px;
    text-transform: uppercase;
    font-weight: 400;
    border-radius: 0;
    transition: all 0.3s ease;
  }
  
  .btn-primary.btn-custom {
    background-color: #1a1a1a !important;
    border-color: #1a1a1a !important;
  }
  
  .btn-primary.btn-custom:hover {
    background-color: #333 !important;
  }
  
  .btn-warning.btn-custom {
    background-color: #c8a165;
    border-color: #c8a165;
    color: white;
  }
  
  .btn-warning.btn-custom:hover {
    background-color: #b89050;
    border-color: #b89050;
  }
  
  .btn-outline-danger.btn-custom {
    border-color: #1a1a1a;
    color: #1a1a1a;
    background-color: transparent;
  }
  
  .btn-outline-danger.btn-custom:hover {
    background-color: #1a1a1a;
    color: white;
  }
  
  .btn-outline-secondary.btn-custom {
    border-color: #777;
    color: #777;
  }
  
  .btn-outline-secondary.btn-custom:hover {
    background-color: #f5f5f5;
    color: #1a1a1a;
  }
  
  /* Dropdown styling */
  .dropdown-menu {
    border-radius: 0;
    box-shadow: 0 5px 10px rgba(0,0,0,0.1);
    border: none;
    padding: 0;
  }
  
  .dropdown-item {
    padding: 12px 20px;
    font-size: 12px;
    letter-spacing: 1px;
    border-bottom: 1px solid #f5f5f5;
  }
  
  .dropdown-item:hover {
    background-color: #f9f9f9;
  }
  
  /* Pagination styling */
  .pagination-container {
    margin: 50px 0;
  }
  
  .pagination {
    gap: 5px;
  }
  
  .page-item .page-link {
    border: none;
    background: transparent;
    color: #777;
    padding: 10px 15px;
    font-size: 14px;
  }
  
  .page-item.active .page-link {
    background-color: #1a1a1a;
    color: white;
  }
  
  .page-item.disabled .page-link {
    color: #ccc;
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .order-info {
      grid-template-columns: 1fr;
    }
    
    .order-actions {
      flex-direction: column;
    }
    
    .btn-custom {
      width: 100%;
    }
  }
</style>
<div class="orders-container">
  <!-- Search Form -->
  <div class="search-container mb-4">
    <form id="orderSearchForm" class="d-flex" method="GET" action="">
      <input type="text" name="search" id="orderNumberSearch" class="form-control me-2" 
             placeholder="Search by Order #" aria-label="Search orders" 
             value="<%= searchTerm %>">
      <button type="submit" class="btn btn-dark btn-custom">
        <i class="fas fa-search"></i> Search
      </button>
      <% if (searchTerm) { %>
        <a href="/myOrders" class="btn btn-outline-secondary btn-custom ms-2">
          <i class="fas fa-times"></i> Clear
        </a>
      <% } %>
    </form>
  </div>
  <header class="page-header">
    <div class="orders-container">
        <h1 class="page-title">My Orders</h1>
    </div>
</header>

<div class="orders-container">
    <% if (orders.length === 0) { %>
        <!-- Empty State for No Orders -->
        <div class="empty-state" >
            <i class="fas fa-shopping-bag"></i>
            <h3>No Orders Yet</h3>
            <p class="text-muted">Looks like you haven't placed any orders yet.</p>
            <a href="/shop" class="btn btn-custom text-blac" style="background-color: #ffffff; border-color:#000000;">
                <i class="fas fa-shopping-cart"></i> Start Shopping
            </a>
        </div>
    <% } else { %>
        <% orders.forEach(function(order) { %>
            <div class="order-card">
                <!-- Order Header -->
                <div class="order-header d-flex justify-content-between align-items-center">
                    <div>
                        <h4 class="mb-1">Order #<%= order.orderNumber %></h4>
                        <span class="text-muted">Placed on <%= order.orderDate %></span>
                    </div>
                    <span class="status-badge status-<%= order.status.toLowerCase() %>">
                        <i class="fas fa-circle me-1"></i> <%= order.status %>
                    </span>
                </div>

                <!-- Order Content -->
                <div class="order-content">
                    <!-- Order Information -->
                    <div class="order-info">
                        <div class="info-item"><strong>Total Amount:</strong> ₹<%= order.finalAmount.toFixed(2) %></div>
                        <div class="info-item"><strong>Final Amount:</strong> ₹<%= order.finalAmount.toFixed(2) %></div>
                        <div class="info-item"><strong>Payment Method:</strong> <%= order.paymentMethod %></div>
                        <div class="info-item"><strong>Shipping Address:</strong> <%= order.address %></div>
                    </div>

                    <!-- Order Items -->
                    <div class="products-list">
                        <h5 class="mb-3">Order Items</h5>
                        <% order.products.forEach(function(product) { %>
                            <div class="product-card">
                                <img src="<%= product.image.replace('_', '_/') %>" alt="<%= product.name %>" class="product-image">
                                <div class="product-info">
                                    <h5><%= product.name %></h5>
                                    <p>
                                        <span class="me-3">Quantity: <%= product.quantity %></span>
                                        <span>Price: ₹<%= product.price.toFixed(2) %></span>
                                        <span>Size: <%= product.selectedSize %></span>
                                    </p>

                                    <!-- Return Option for Delivered Orders -->
                                    <% if (order.status === 'Delivered') { %>
                                        <div class="return-section mt-2">
                                            <select class="form-select return-reason-select" id="returnReason" aria-label="Select return reason">
                                                <option value="" selected>Select Return Reason</option>
                                                <option value="wrong_size">Wrong Size</option>
                                                <option value="damaged">Product Damaged/Defective</option>
                                                <option value="not_as_described">Product Not As Described</option>
                                                <option value="wrong_item">Wrong Item Received</option>
                                                <option value="quality_issues">Quality Issues</option>
                                                <option value="other">Other</option>
                                            </select>
                                            <button class="btn btn-warning mt-2" 
                                                onclick="initiateReturn('<%= order.orderId %>', '<%= product.id %>')">
                                                <i class="fas fa-undo"></i> Request Return
                                            </button>
                                        </div>
                                    <% } %>
                                    
                                </div>
                            </div>
                        <% }); %>
                    </div>

                    <!-- Order Actions -->
                    <div class="order-actions">
                        <button class="btn btn-primary btn-custom" onclick="viewOrderDetails('<%= order.orderId %>')" style="background-color: #FF3F6C;">
                            <i class="fas fa-eye"></i> View Details
                        </button>
                        <button class="btn btn-primary btn-custom" onclick="downloadInvoice('<%= order.orderId %>')" style="background-color: #14CAD8;">
                            <i class="fas fa-file-pdf"></i> Download Invoice
                        </button>

                        <!-- Retry Payment Button for Pending Payments -->
                        <% if (order.status === 'payment pending') { %>
                            <button class="btn btn-warning btn-custom" 
                                    onclick="retryPayment('<%= order.orderId %>', '<%= order.address._id %>', 'upi', '<%= order.finalAmount %>')">
                                <i class="fas fa-redo"></i> Retry Payment
                            </button>
                        <% } %>

                        <!-- Cancel Order Option -->
                        <% if (order.status === 'Pending') { %>
                            <button class="btn btn-outline-danger btn-custom" onclick="cancelOrder('<%= order.orderId %>')">
                                <i class="fas fa-times"></i> Cancel Order
                            </button>

                            <!-- Modify Items Option for Orders with Multiple Products -->
                            <% if (order.products.length >= 2) { %>
                                <div class="dropdown">
                                    <button class="btn btn-outline-secondary btn-custom dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                        <i class="fas fa-edit"></i> Modify Items
                                    </button>
                                    <ul class="dropdown-menu">
                                        <% order.products.forEach(function(product) { %>
                                            <li>
                                                <a class="dropdown-item" href="#" onclick="cancelProduct('<%= order.orderId %>', '<%= product.id %>')">
                                                    Cancel <%= product.name %>
                                                </a>
                                            </li>
                                        <% }); %>
                                    </ul>
                                </div>
                            <% } %>
                        <% } %>
                    </div>
                </div>
            </div>
        <% }); %>
    <% } %>
</div>

<!-- Pagination -->
<div class="pagination-container text-center mt-4">
    <% if (totalPages > 1) { %>
        <nav>
            <ul class="pagination justify-content-center">
                <!-- Previous Button -->
                <% if (currentPage > 1) { %>
                    <li class="page-item">
                        <a class="page-link" href="?page=<%= currentPage - 1 %>">Previous</a>
                    </li>
                <% } else { %>
                    <li class="page-item disabled"><a class="page-link">Previous</a></li>
                <% } %>

                <!-- Page Numbers -->
                <% for (let i = 1; i <= totalPages; i++) { %>
                    <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                        <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                    </li>
                <% } %>

                <!-- Next Button -->
                <% if (currentPage < totalPages) { %>
                    <li class="page-item">
                        <a class="page-link" href="?page=<%= currentPage + 1 %>">Next</a>
                    </li>
                <% } else { %>
                    <li class="page-item disabled"><a class="page-link">Next</a></li>
                <% } %>
            </ul>
        </nav>
    <% } %>
</div>

<!-- Bootstrap Bundle (includes Popper.js) -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


<script>

document.getElementById('returnReason').addEventListener('click', () => {
    console.log('Dropdown clicked!');
});


function downloadInvoice(orderId) {
    window.location.href = `/download-invoice/${orderId}`;
}


function cancelOrder(orderNumber) {
    Swal.fire({
        title: 'Are you sure?',
        text: 'Do you really want to cancel this entire order?',
        icon: 'warning',
        input: 'text',  
        inputPlaceholder: 'Enter cancellation reason',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, cancel it!',
        inputValidator: (value) => {
            if (!value) {
                return 'Please provide a reason for cancellation!';
            }
        }
    }).then((result) => {
        if (result.isConfirmed && result.value) {
            const reason = result.value; 
            fetch(`/orderCancel/${orderNumber}`, { 
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ reason }) 
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire('Cancelled!', 'Your order has been cancelled.', 'success')
                    .then(() => location.reload());
                } else {
                    Swal.fire('Error!', 'Failed to cancel the order. Please try again.', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire('Error!', 'An error occurred while cancelling the order.', 'error');
            });
        }
    });
}


function cancelProduct(orderNumber, productId) {
    Swal.fire({
        title: 'Are you sure?',
        text: 'Do you really want to cancel this product?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, cancel it!',
        cancelButtonText: 'No, keep it'
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/productCancel/${orderNumber}/${productId}`, { 
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Cancelled!',
                        text: 'The product has been cancelled successfully.',
                        showConfirmButton: false,
                        timer: 2000
                    }).then(() => location.reload());
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: data.message || 'Failed to cancel the product. Please try again.',
                        showConfirmButton: false,
                        timer: 2500
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: 'An error occurred while cancelling the product.',
                    showConfirmButton: false,
                    timer: 2500
                });
            });
        }
    });
}



function viewOrderDetails(orderNumber) {
    window.location.href = `/orderDetails/${orderNumber}`;
}



async function initiateReturn(orderId, productId) {
     
    const reason = document.getElementById('returnReason').value
    console.log('order Id: ', orderId, 'product Id: ', productId, 'reason: ', reason);
    
    if (!reason) {
        Swal.fire({
            icon: 'warning',
            title: 'Return Reason Required',
            text: 'Please select a return reason',
            confirmButtonColor: '#3085d6'
        });
        return;
    }
    
    try {
        // Show loading state
        Swal.fire({
            title: 'Processing Return Request',
            text: 'Please wait...',
            allowOutsideClick: false,
            showConfirmButton: false,
            willOpen: () => {
                Swal.showLoading();
            }
        });

        const response = await fetch('/myOrders/return', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                orderId,
                productId,
                reason
            })
        });

        const data = await response.json();

        if (data.success) {
            await Swal.fire({
                icon: 'success',
                title: 'Return Request Initiated',
                text: 'Your return request has been successfully submitted',
                confirmButtonColor: '#28a745',
                showConfirmButton: true
            });
            location.reload();
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Return Request Failed',
                text: data.message || 'Failed to initiate return request',
                confirmButtonColor: '#dc3545'
            });
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'An error occurred while processing your request',
            confirmButtonColor: '#dc3545',
            footer: '<a href="#">Contact support</a>'
        });
    }
}


async function retryPayment(orderId, addressId, paymentMethod, amount) {

console.log('Retry payment data:', orderId, paymentMethod, amount);

try {

    console.log('Order datas: ', orderId, amount);
    

    const responseOfRazorpay = await fetch("/create-retry-order", {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify({ amount: amount, currency: "INR", orderId: orderId }),  
    });

    const data = await responseOfRazorpay.json();


    console.log('data from the razorpay: ', data);
    
    if (!data.success) throw new Error("Failed to create order");

    const options = {
        key: "rzp_test_Qg11WlEkiWMukc",
        amount: data.order.amount,  
        currency: data.order.currency,
        order_id: data.order.id,
        name: "Trendy Threads",
        description: "Payment Retry",
        handler: async function (response) {

            Swal.fire({
                title: "Payment Successful!",
                text: "Payment ID: " + response.razorpay_payment_id,
                icon: "success",
                confirmButtonColor: "#28a745",
                confirmButtonText: "OK",
            }).then(async () => {

                console.log('helloo heyyy');

                const response = await fetch('/retryPaymentSuccess', {
                    method: 'POST',
                    headers: {
                        'Content-type': 'application/json'
                    },
                    body: JSON.stringify({ orderId })
                })


                const result = await response.json()


                if (result.success) {
                    window.location.href = '/payment-success'
                    return;
                }

                Swal.fire({
                    title: "Payment Failed!",
                    text: 'Error while retrying payment',
                    icon: "error",
                    confirmButtonColor: "#dc3545",
                    confirmButtonText: "Try Again",
                })

            });
        },
        prefill: {
            email: "test@example.com",
            contact: "9999999999",
        },
        theme: { color: "#3399cc" },
        modal: {
            ondismiss: async function () {
                    window.location.href = `/payment-failure?orderId=${data.order.id}&amount=${amount}&paymentMethod=upi&addressId=${addressId}`;
                    return;
                
            }
        }
    };

    const rzp = new Razorpay(options);
    rzp.open();

} catch (error) {
    console.error("Error in retryPayment:", error);
    Swal.fire({
        title: "Payment Failed!",
        text: error.message,
        icon: "error",
        confirmButtonColor: "#dc3545",
        confirmButtonText: "Try Again",
    }).then(() => {
        console.log('Selected address ID:', addressId);
        window.location.href = `/payment-failure?orderId=${data.order.id}&amount=${amount}&paymentMethod=RAZORPAY&addressId=${addressId}`;
    });
}
}
</script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<%- include("../../views/partials/user/footer") %>